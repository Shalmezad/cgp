#!/usr/bin/env python3

import sys
sys.path.append('.')

from dataclasses import dataclass
import random

import numpy as np

from cgp.gene import Gene, GeneBuilder, GeneBuilderConfig
from cgp.gene import GeneMutator, GeneMutatorConfig

builder_config = GeneBuilderConfig(3, 200, 1)
builder = GeneBuilder(builder_config)

mutator_config = GeneMutatorConfig(0.08)
mutator = GeneMutator(mutator_config)

def measure_fitness(actual, expected):
    # return np.sum(np.abs(actual - expected))
    return (np.square(actual - expected)).mean()

def problem_output(input):
    return (np.power(input[:,0], 2) - input[:,1])/2.0
    # return np.sin(input[:,0]) * np.cos(-1 * input[:,1])

@dataclass
class MeasuredGene:
    fitness: float
    gene: Gene

mu = 50
lamb = 100

pool = [builder.makeGene() for x in range(mu)]

validation_input = [np.random.rand(3) for x in range(100)]
validation_input = np.asarray(validation_input)
validation_output = problem_output(validation_input)


for generation in range(5000):
    print("GENERATION: {}".format(generation))
    batch = [np.random.rand(3) for x in range(100)]
    batch = np.asarray(batch)
    expected_output = problem_output(batch)

    # Build our full pool:
    children = []
    for x in range(lamb):
        parent = random.choice(pool)
        child = mutator.mutateGene(parent)
        children.append(child)

    pool.extend(children)
    
    measured_genes = []
    for gene in pool:
        gene_output = gene.evaluate(batch)
        fitness = measure_fitness(gene_output, expected_output)
        measured_genes.append(MeasuredGene(
            fitness, gene
        ))

    # Fitness is error, so lower fitness is better
    measured_genes.sort(key=lambda x: x.fitness)

    best_mu = measured_genes[:mu]
    pool = [x.gene for x in best_mu]

    validation_evaluated = pool[0].evaluate(validation_input)
    validation_fitness = measure_fitness(validation_evaluated, validation_output)
    print("\tValidation fitness: {}".format(validation_fitness))
    print("\t{}".format(parent.toHumanFormula()))

    # We have the best parent:
    offspring = [mutator.mutateGene(parent) for x in range(20)]
